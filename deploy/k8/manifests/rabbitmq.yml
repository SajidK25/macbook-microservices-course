apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-credentials
  namespace: microservices
type: Opaque
data:
  rabbitmq-user: Z3Vlc3Q=      # Base64: guest
  rabbitmq-pass: Z3Vlc3Q=      # Base64: guest
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: microservices
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        resources:
          limits:
            memory: "500Mi"
          requests:
            memory: "300Mi"
            cpu: "100m"
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: rabbitmq-user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-credentials
              key: rabbitmq-pass
        ports:
        - containerPort: 5672
          name: amqp
        - containerPort: 15672
          name: management
        livenessProbe:
          tcpSocket:
            port: 5672
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/healthchecks/node
            port: 15672
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: microservices
spec:
  selector:
    app: rabbitmq
  ports:
  - name: amqp
    protocol: TCP
    port: 5672
    targetPort: 5672
  - name: management
    protocol: TCP
    port: 15672
    targetPort: 15672
  type: ClusterIP